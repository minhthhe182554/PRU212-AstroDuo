using UnityEngine;

public class WindBehaviour : MonoBehaviour
{
    [Header("Wind Settings")]
    [SerializeField] private float maxWindStrength = 5f; // T·ªëc ƒë·ªô gi√≥ t·ªëi ƒëa
    [SerializeField] private Vector2 windDirection; // H∆∞·ªõng gi√≥ (normalized)
    [SerializeField] private float windStrength; // C∆∞·ªùng ƒë·ªô gi√≥ hi·ªán t·∫°i
    
    [Header("Visual")]
    [SerializeField] private SpriteRenderer windIndicator; // Sprite hi·ªÉn th·ªã h∆∞·ªõng gi√≥
    [SerializeField] private float minScale = 0.5f; // Scale t·ªëi thi·ªÉu cho arrow
    [SerializeField] private float maxScale = 2.0f; // Scale t·ªëi ƒëa cho arrow
    
    public static WindBehaviour Instance { get; private set; }
    
    void Awake()
    {
        Instance = this;
    }
    
    void Start()
    {
        // Random h∆∞·ªõng gi√≥ khi map b·∫Øt ƒë·∫ßu
        GenerateRandomWind();
        
        // T·ª± ƒë·ªông t√¨m SpriteRenderer n·∫øu ch∆∞a g√°n
        if (windIndicator == null)
            windIndicator = GetComponent<SpriteRenderer>();
        
        // C·∫≠p nh·∫≠t h∆∞·ªõng v√† scale sprite theo wind
        UpdateWindVisual();
        
        Debug.Log($"üå™Ô∏è Wind generated - Direction: {windDirection}, Strength: {windStrength}");
    }
    
    private void GenerateRandomWind()
    {
        // Random h∆∞·ªõng gi√≥ (8 h∆∞·ªõng ch√≠nh: N, NE, E, SE, S, SW, W, NW)
        float[] angles = { 0f, 45f, 90f, 135f, 180f, 225f, 270f, 315f };
        float randomAngle = angles[Random.Range(0, angles.Length)];
        
        // Convert angle to direction vector
        float radians = randomAngle * Mathf.Deg2Rad;
        windDirection = new Vector2(Mathf.Sin(radians), Mathf.Cos(radians)).normalized;
        
        // Random wind strength (1 -> maxWindStrength)
        windStrength = Random.Range(1f, maxWindStrength + 0.1f);
    }
    
    private void UpdateWindVisual()
    {
        if (windIndicator != null)
        {
            // Xoay sprite theo h∆∞·ªõng gi√≥ - FIX cho sprite h∆∞·ªõng ph·∫£i ban ƒë·∫ßu
            float angle = Mathf.Atan2(windDirection.y, windDirection.x) * Mathf.Rad2Deg;
            windIndicator.transform.rotation = Quaternion.Euler(0, 0, angle);
            
            // Scale chi·ªÅu Y theo wind strength
            float scaleY = Mathf.Lerp(minScale, maxScale, windStrength / maxWindStrength);
            Vector3 newScale = windIndicator.transform.localScale;
            newScale.y = scaleY;
            windIndicator.transform.localScale = newScale;
            
            Debug.Log($"üéØ Arrow scaled - Wind Strength: {windStrength:F1}, Scale Y: {scaleY:F2}");
        }
    }
    
    /// <summary>
    /// T√≠nh to√°n wind effect cho jet d·ª±a tr√™n h∆∞·ªõng di chuy·ªÉn c·ªßa jet
    /// </summary>
    /// <param name="jetDirection">H∆∞·ªõng di chuy·ªÉn c·ªßa jet (normalized)</param>
    /// <returns>Wind effect (√¢m = ng∆∞·ª£c gi√≥/vu√¥ng g√≥c, d∆∞∆°ng = xu√¥i gi√≥)</returns>
    public float GetWindEffect(Vector2 jetDirection)
    {
        if (jetDirection.magnitude == 0) return 0f;
        
        // T√≠nh dot product ƒë·ªÉ x√°c ƒë·ªãnh g√≥c gi·ªØa h∆∞·ªõng jet v√† h∆∞·ªõng gi√≥
        float dotProduct = Vector2.Dot(jetDirection.normalized, windDirection);
        
        if (dotProduct >= 0.707f) // 0-45 ƒë·ªô: C√πng h∆∞·ªõng ho·∫∑c g·∫ßn c√πng h∆∞·ªõng
        {
            // Bay c√πng h∆∞·ªõng gi√≥ ‚Üí bonus full speed
            return windStrength;
        }
        else if (dotProduct >= 0f) // 45-90 ƒë·ªô: H∆°i l·ªách h∆∞·ªõng gi√≥
        {
            // Bay h∆°i l·ªách h∆∞·ªõng gi√≥ ‚Üí bonus 1/2 speed
            return windStrength * 0.5f;
        }
        else // 90-180 ƒë·ªô: Vu√¥ng g√≥c ho·∫∑c ng∆∞·ª£c h∆∞·ªõng gi√≥
        {
            // Bay vu√¥ng g√≥c ho·∫∑c ng∆∞·ª£c gi√≥ ‚Üí penalty 1/2 speed
            return -windStrength * 0.5f;
        }
    }
    
    /// <summary>
    /// L·∫•y th√¥ng tin gi√≥ ƒë·ªÉ hi·ªÉn th·ªã UI
    /// </summary>
    public string GetWindInfo()
    {
        string directionText = GetDirectionText();
        return $"Wind: {directionText} {windStrength:F1}";
    }
    
    private string GetDirectionText()
    {
        float angle = Mathf.Atan2(windDirection.x, windDirection.y) * Mathf.Rad2Deg;
        if (angle < 0) angle += 360;
        
        if (angle >= 337.5f || angle < 22.5f) return "N";
        else if (angle >= 22.5f && angle < 67.5f) return "NE";
        else if (angle >= 67.5f && angle < 112.5f) return "E";
        else if (angle >= 112.5f && angle < 157.5f) return "SE";
        else if (angle >= 157.5f && angle < 202.5f) return "S";
        else if (angle >= 202.5f && angle < 247.5f) return "SW";
        else if (angle >= 247.5f && angle < 292.5f) return "W";
        else return "NW";
    }
    
    // Method ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i wind (c√≥ th·ªÉ g·ªçi t·ª´ UI debug)
    public void RegenerateWind()
    {
        GenerateRandomWind();
        UpdateWindVisual();
        Debug.Log($"ÔøΩÔøΩ Wind regenerated - Direction: {windDirection}, Strength: {windStrength}");
    }
    
    // Getter methods
    public Vector2 GetWindDirection() => windDirection;
    public float GetWindStrength() => windStrength;
    public float GetCurrentScaleY() => windIndicator != null ? windIndicator.transform.localScale.y : 1f;
    
    void OnDrawGizmos()
    {
        if (Application.isPlaying)
        {
            // V·∫Ω h∆∞·ªõng gi√≥ trong editor
            Gizmos.color = Color.cyan;
            Vector3 start = transform.position;
            Vector3 end = start + (Vector3)(windDirection * 2f);
            Gizmos.DrawLine(start, end);
            Gizmos.DrawSphere(end, 0.1f);
            
            // V·∫Ω text hi·ªÉn th·ªã wind strength
            #if UNITY_EDITOR
            UnityEditor.Handles.Label(transform.position + Vector3.up * 0.5f, 
                $"Wind: {windStrength:F1}");
            #endif
        }
    }
}
