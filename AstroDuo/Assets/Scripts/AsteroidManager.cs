using UnityEngine;
using UnityEngine.Tilemaps;
using System.Collections;

public class AsteroidManager : MonoBehaviour
{
    [Header("Asteroid Settings")]
    [SerializeField] private GameObject[] asteroidPrefabs; // Array c√°c prefab asteroid
    [SerializeField] private float spawnInterval = 5f; // Th·ªùi gian spawn (gi√¢y)
    [SerializeField] private int maxAsteroids = 10; // S·ªë l∆∞·ª£ng asteroid t·ªëi ƒëa
    
    [Header("Spawn Area")]
    [SerializeField] private Vector2 spawnAreaMin = new Vector2(-10, -5); // G√≥c d∆∞·ªõi tr√°i
    [SerializeField] private Vector2 spawnAreaMax = new Vector2(10, 5);   // G√≥c tr√™n ph·∫£i
    
    [Header("Collision Detection")]
    [SerializeField] private Tilemap borderTilemap; // Tilemap h·ªìng (vi·ªÅn)
    [SerializeField] private Tilemap destructibleTilemap; // Tilemap v√†ng (c√≥ th·ªÉ ph√° h·ªßy)
    [SerializeField] private LayerMask obstacleLayerMask = -1; // Layer c·ªßa obstacles
    [SerializeField] private float checkRadius = 0.5f; // B√°n k√≠nh check collision
    
    [Header("Debug")]
    [SerializeField] private bool showSpawnArea = true; // Hi·ªÉn th·ªã spawn area trong editor
    
    private int currentAsteroidCount = 0;
    
    void Start()
    {
        // B·∫Øt ƒë·∫ßu spawn asteroid
        StartCoroutine(SpawnAsteroidRoutine());
    }
    
    IEnumerator SpawnAsteroidRoutine()
    {
        while (true)
        {
            yield return new WaitForSeconds(spawnInterval);
            
            if (currentAsteroidCount < maxAsteroids && asteroidPrefabs.Length > 0)
            {
                TrySpawnAsteroid();
            }
        }
    }
    
    void TrySpawnAsteroid()
    {
        int attempts = 0;
        int maxAttempts = 20; // Gi·ªõi h·∫°n s·ªë l·∫ßn th·ª≠ spawn
        
        while (attempts < maxAttempts)
        {
            Vector2 spawnPosition = GetRandomSpawnPosition();
            
            if (IsValidSpawnPosition(spawnPosition))
            {
                SpawnAsteroid(spawnPosition);
                break;
            }
            
            attempts++;
        }
        
        if (attempts >= maxAttempts)
        {
            Debug.LogWarning("‚ö†Ô∏è Kh√¥ng th·ªÉ t√¨m ƒë∆∞·ª£c v·ªã tr√≠ spawn h·ª£p l·ªá cho asteroid!");
        }
    }
    
    Vector2 GetRandomSpawnPosition()
    {
        float x = Random.Range(spawnAreaMin.x, spawnAreaMax.x);
        float y = Random.Range(spawnAreaMin.y, spawnAreaMax.y);
        return new Vector2(x, y);
    }
    
    bool IsValidSpawnPosition(Vector2 position)
    {
        Vector3Int cellPosition = Vector3Int.FloorToInt(position);
        
        // 1. PH·∫¢I n·∫±m TRONG vi·ªÅn h·ªìng
        if (borderTilemap != null)
        {
            Vector3Int borderCell = borderTilemap.WorldToCell(position);
            if (borderTilemap.HasTile(borderCell))
            {
                return false; // Tr√πng v·ªõi block vi·ªÅn h·ªìng
            }
            
            // Check xem c√≥ n·∫±m trong khu v·ª±c ƒë∆∞·ª£c bao quanh b·ªüi vi·ªÅn kh√¥ng
            if (!IsInsideBorder(position))
            {
                return false; // N·∫±m ngo√†i vi·ªÅn
            }
        }
        
        // 2. KH√îNG ƒë∆∞·ª£c tr√πng v·ªõi block v√†ng
        if (destructibleTilemap != null)
        {
            Vector3Int destructibleCell = destructibleTilemap.WorldToCell(position);
            if (destructibleTilemap.HasTile(destructibleCell))
            {
                return false; // Tr√πng v·ªõi block v√†ng
            }
        }
        
        // 3. Check collision v·ªõi c√°c object kh√°c
        Collider2D collider = Physics2D.OverlapCircle(position, checkRadius, obstacleLayerMask);
        return collider == null;
    }
    
    bool IsInsideBorder(Vector2 worldPosition)
    {
        // Convert to tilemap coordinates
        Vector3Int cellPos = borderTilemap.WorldToCell(worldPosition); 
        
        // Check 4 h∆∞·ªõng t·ª´ v·ªã tr√≠ n√†y ra ngo√†i
        // N·∫øu t·∫•t c·∫£ h∆∞·ªõng ƒë·ªÅu g·∫∑p border tile th√¨ position n√†y n·∫±m trong vi·ªÅn
        
        bool foundLeft = false, foundRight = false, foundUp = false, foundDown = false;
        
        // Check left
        for (int x = cellPos.x; x >= cellPos.x - 20; x--)
        {
            if (borderTilemap.HasTile(new Vector3Int(x, cellPos.y, 0)))
            {
                foundLeft = true;
                break;
            }
        }
        
        // Check right  
        for (int x = cellPos.x; x <= cellPos.x + 20; x++)
        {
            if (borderTilemap.HasTile(new Vector3Int(x, cellPos.y, 0)))
            {
                foundRight = true;
                break;
            }
        }
        
        // Check up
        for (int y = cellPos.y; y <= cellPos.y + 20; y++)
        {
            if (borderTilemap.HasTile(new Vector3Int(cellPos.x, y, 0)))
            {
                foundUp = true;
                break;
            }
        }
        
        // Check down
        for (int y = cellPos.y; y >= cellPos.y - 20; y--)
        {
            if (borderTilemap.HasTile(new Vector3Int(cellPos.x, y, 0)))
            {
                foundDown = true;
                break;
            }
        }
        
        return foundLeft && foundRight && foundUp && foundDown;
    }
    
    void SpawnAsteroid(Vector2 position)
    {
        // Random ch·ªçn 1 prefab t·ª´ array
        int randomIndex = Random.Range(0, asteroidPrefabs.Length);
        GameObject asteroidPrefab = asteroidPrefabs[randomIndex];
        
        // Spawn asteroid
        GameObject asteroid = Instantiate(asteroidPrefab, position, Quaternion.identity);
        
        // Random rotation ban ƒë·∫ßu
        float randomRotation = Random.Range(0f, 360f);
        asteroid.transform.rotation = Quaternion.Euler(0, 0, randomRotation);
        
        // TƒÉng counter
        currentAsteroidCount++;
        
        // ƒêƒÉng k√Ω event khi asteroid b·ªã destroy
        AsteroidBehaviour asteroidBehaviour = asteroid.GetComponent<AsteroidBehaviour>();
        if (asteroidBehaviour != null)
        {
            asteroidBehaviour.OnAsteroidDestroyed += OnAsteroidDestroyed;
        }
        
        Debug.Log($"üåë Asteroid spawned at {position} - Total: {currentAsteroidCount}");
    }
    
    void OnAsteroidDestroyed()
    {
        currentAsteroidCount--;
        Debug.Log($"üí• Asteroid destroyed - Remaining: {currentAsteroidCount}");
    }
    
    // Spawn asteroid manually (c√≥ th·ªÉ g·ªçi t·ª´ script kh√°c)
    public void SpawnAsteroidManually()
    {
        if (currentAsteroidCount < maxAsteroids)
        {
            TrySpawnAsteroid();
        }
    }
    
    // Clear t·∫•t c·∫£ asteroid
    public void ClearAllAsteroids()
    {
        AsteroidBehaviour[] asteroids = FindObjectsOfType<AsteroidBehaviour>();
        // AsteroidBehaviour[] asteroids = FindObjectsByType<AsteroidBehaviour>();
        foreach (var asteroid in asteroids)
        {
            Destroy(asteroid.gameObject);
        }
        currentAsteroidCount = 0;
    }
    
    void OnDrawGizmosSelected()
    {
        if (showSpawnArea)
        {
            // V·∫Ω spawn area trong Scene view
            Gizmos.color = Color.yellow;
            Vector2 center = (spawnAreaMin + spawnAreaMax) / 2;
            Vector2 size = spawnAreaMax - spawnAreaMin;
            Gizmos.DrawWireCube(center, size);
            
            // V·∫Ω check radius
            Gizmos.color = Color.red;
            Gizmos.DrawWireSphere(transform.position, checkRadius);
        }
    }
} 